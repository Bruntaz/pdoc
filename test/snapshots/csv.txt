<module csv  # CSV parsing and writ…
    <var QUOTE_MINIMAL = 0>
    <var QUOTE_ALL = 1>
    <var QUOTE_NONNUMERIC = 2>
    <var QUOTE_NONE = 3>
    <class csv.Error  # inherited from _csv.Error, Common base class fo…
        <method def __init__(self, /, *args, **kwargs): ...>
        <method def with_traceback(unknown): ...  # Exception.with_trace…>
        <var args = <attribute 'args' of 'BaseException' objects>  # inherited from builtins.BaseException.args>>
    <class csv.Dialect  # Describe a CSV diale…
        <method def __init__(self): ...>
        <var delimiter = None>
        <var quotechar = None>
        <var escapechar = None>
        <var doublequote = None>
        <var skipinitialspace = None>
        <var lineterminator = None>
        <var quoting = None>>
    <var __doc__ = CSV parsing and writing.

    This module provides classes that assist in the reading and writing
    of Comma Separated Value (CSV) files, and implements the interface
    described by PEP 305.  Although many CSV files are simple to parse,
    the format is not formally defined by a stable specification and
    is subtle enough that parsing lines of a CSV file with something
    like line.split(",") is bound to fail.  The module supports three
    basic APIs: reading, writing, and registration of dialects.


    DIALECT REGISTRATION:

    Readers and writers support a dialect argument, which is a convenient
    handle on a group of settings.  When the dialect argument is a string,
    it identifies one of the dialects previously registered with the module.
    If it is a class or instance, the attributes of the argument are used as
    the settings for the reader or writer:

        class excel:
            delimiter = ','
            quotechar = '"'
            escapechar = None
            doublequote = True
            skipinitialspace = False
            lineterminator = '\r\n'
            quoting = QUOTE_MINIMAL

    SETTINGS:

        * quotechar - specifies a one-character string to use as the
            quoting character.  It defaults to '"'.
        * delimiter - specifies a one-character string to use as the
            field separator.  It defaults to ','.
        * skipinitialspace - specifies how to interpret whitespace which
            immediately follows a delimiter.  It defaults to False, which
            means that whitespace immediately following a delimiter is part
            of the following field.
        * lineterminator -  specifies the character sequence which should
            terminate rows.
        * quoting - controls when quotes should be generated by the writer.
            It can take on any of the following module constants:

            csv.QUOTE_MINIMAL means only when required, for example, when a
                field contains either the quotechar or the delimiter
            csv.QUOTE_ALL means that quotes are always placed around fields.
            csv.QUOTE_NONNUMERIC means that quotes are always placed around
                fields which do not parse as integers or floating point
                numbers.
            csv.QUOTE_NONE means that quotes are never placed around fields.
        * escapechar - specifies a one-character string used to escape
            the delimiter when quoting is set to QUOTE_NONE.
        * doublequote - controls the handling of quotes inside fields.  When
            True, two consecutive quotes are interpreted as one during read,
            and when writing, each quote character embedded in the data is
            written as two quotes
    >
    <class csv.excel  # Describe the usual p…
        <method def __init__(self): ...  # inherited from csv.Dialect.__init__>
        <var delimiter = ,>
        <var quotechar = ">
        <var doublequote = True>
        <var skipinitialspace = False>
        <var lineterminator = 
        >
        <var quoting = 0>
        <var escapechar = None  # inherited from csv.Dialect.escapechar>>
    <class csv.excel_tab  # Describe the usual p…
        <method def __init__(self): ...  # inherited from csv.Dialect.__init__>
        <var delimiter = 	>
        <var quotechar = "  # inherited from csv.excel.quotechar>
        <var doublequote = True  # inherited from csv.excel.doublequote>
        <var skipinitialspace = False  # inherited from csv.excel.skipinitialspace>
        <var lineterminator = 
          # inherited from csv.excel.lineterminator>
        <var quoting = 0  # inherited from csv.excel.quoting>
        <var escapechar = None  # inherited from csv.Dialect.escapechar>>
    <function def field_size_limit(unknown): ...  # inherited from _csv.field_size_limit, Sets an upper limit …>
    <function def reader(unknown): ...  # inherited from _csv.reader, csv_reader = reader(…>
    <function def writer(unknown): ...  # inherited from _csv.writer, csv_writer = csv.wri…>
    <function def register_dialect(unknown): ...  # inherited from _csv.register_dialect, Create a mapping fro…>
    <function def get_dialect(unknown): ...  # inherited from _csv.get_dialect, Return the dialect i…>
    <function def list_dialects(unknown): ...  # inherited from _csv.list_dialects, Return a list of all…>
    <class csv.Sniffer  # "Sniffs" the format …
        <method def __init__(self): ...>
        <method def sniff(self, sample, delimiters=None): ...  # Returns a dialect (o…>
        <method def has_header(self, sample): ...>>
    <function def unregister_dialect(unknown): ...  # inherited from _csv.unregister_dialect, Delete the name/dial…>
    <var __version__ = 1.0>
    <class csv.DictReader
        <method def __init__(self, f, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds): ...>
        <var fieldnames>>
    <class csv.DictWriter
        <method def __init__(self, f, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds): ...>
        <method def writeheader(self): ...>
        <method def writerow(self, rowdict): ...>
        <method def writerows(self, rowdicts): ...>>
    <class csv.unix_dialect  # Describe the usual p…
        <method def __init__(self): ...  # inherited from csv.Dialect.__init__>
        <var delimiter = ,>
        <var quotechar = ">
        <var doublequote = True>
        <var skipinitialspace = False>
        <var lineterminator = 
        >
        <var quoting = 1>
        <var escapechar = None  # inherited from csv.Dialect.escapechar>>>